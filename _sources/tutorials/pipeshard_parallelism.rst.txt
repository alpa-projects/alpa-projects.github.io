
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/pipeshard_parallelism.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_pipeshard_parallelism.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_pipeshard_parallelism.py:


Distributed Training with Both Shard and Pipeline Parallelism
=============================================================

Alpa can automatically parallelizes jax functions with both shard
parallelism (a.k.a. intra-operator parallelism) and pipeline parallelism
(a.k.a. inter-operator parallelism). Shard parallelism includes
data parallelism, operator parallelism, and their combinations.
The :ref:`quick start <Alpa Quickstart>` focuses on using Alpa for shard parallelism.

In this tutorial, we show how to use Alpa with both shard and pipeline parallelism.
First, we show how to use Alpa to manually assign stages for pipeline parallelism.
Then we show how to use Alpa to automate this process.

.. GENERATED FROM PYTHON SOURCE LINES 17-20

Import Libraries and Initialize Environment
-------------------------------------------
We first import the required libraries.

.. GENERATED FROM PYTHON SOURCE LINES 20-32

.. code-block:: default


    import alpa
    from alpa.testing import assert_allclose
    import copy
    from flax import linen as nn
    from flax.training.train_state import TrainState
    import jax
    import jax.numpy as jnp
    from jax import random
    import optax
    import ray








.. GENERATED FROM PYTHON SOURCE LINES 33-37

Connect to a Ray Cluster
-------------------------------------------
Alpa uses a distributed framework `ray <https://docs.ray.io/>`_ to manage
the cluster and disributed workers. We initialize ray and alpa.

.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: default


    ray.init()
    alpa.init(cluster="ray")

    # Alternatively, you can use the following command to connect to an existing
    # ray cluster.
    # ray.init(address="auto")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    2022-06-30 07:55:58,200 INFO services.py:1470 -- View the Ray dashboard at http://127.0.0.1:8265




.. GENERATED FROM PYTHON SOURCE LINES 46-52

Train an MLP on a Single Device
-------------------------------
In this tutorial, we use a toy dataset to train an MLP model.
Specifically, we use the model to fit the function: :math:`y = Wx + b`.
Note that now this model is being executed on CPU because we force the driver
process to use the CPU.

.. GENERATED FROM PYTHON SOURCE LINES 52-108

.. code-block:: default



    class MLPModel(nn.Module):
        hidden_dim: int

        @nn.compact
        def __call__(self, x):
            x = nn.Dense(features=self.hidden_dim * 4)(x)
            x = nn.relu(x)
            x = nn.Dense(features=self.hidden_dim)(x)
            x = nn.relu(x)
            x = nn.Dense(features=self.hidden_dim * 4)(x)
            x = nn.relu(x)
            x = nn.Dense(features=self.hidden_dim)(x)
            x = nn.relu(x)
            return x


    dim = 2048
    batch_size = 2048

    # Generate ground truth W and b
    rngkey = jax.random.PRNGKey(0)
    k1, k2 = random.split(rngkey)
    W = random.normal(k1, (dim, dim), jnp.float32)
    b = random.normal(k2, (dim,), jnp.float32)

    # Generate the training data
    ksample, knoise = random.split(k1)
    x = random.normal(ksample, (batch_size, dim), jnp.float32)
    y = (x @ W + b) + 0.1 * random.normal(knoise, (batch_size, dim), jnp.float32)

    # Initialize a train state, which includes the model paramter and optimizer
    # state.
    model = MLPModel(hidden_dim=dim)
    params = model.init(rngkey, x)
    tx = optax.adam(learning_rate=1e-3)
    state = TrainState.create(apply_fn=model.apply, params=params, tx=tx)


    # Define training step
    def train_step(state, batch):

        def loss_func(params):
            out = model.apply(params, batch["x"])
            loss = jnp.mean((out - batch["y"])**2)
            return loss

        grads = jax.grad(loss_func)(state.params)
        new_state = state.apply_gradients(grads=grads)
        return new_state


    batch = {"x": x, "y": y}
    expected_state = train_step(state, batch)








.. GENERATED FROM PYTHON SOURCE LINES 109-116

Pipeline Parallelism with Manual Assignment
-------------------------------------------
To manually assign stages for pipeline parallelism, we can use the
``alpa.mark_pipeline_boundary`` function to mark the boundary of each pipeline
stage, and use the ``@alpa.manual_layer_construction`` decorator to indicate
that we are manually assigning stages. Note that each the pipeline stage is
also automatically parallelized by the shard parallel pass.

.. GENERATED FROM PYTHON SOURCE LINES 116-173

.. code-block:: default



    # Define the manually parallelized model with pipeline markers.
    class ManualPipelineMLPModel(nn.Module):
        hidden_dim: int

        @nn.compact
        def __call__(self, x):
            x = nn.Dense(features=self.hidden_dim * 4)(x)
            x = nn.relu(x)
            x = nn.Dense(features=self.hidden_dim)(x)
            x = nn.relu(x)
            # Use this boundary marker to separate the network into two stages.
            alpa.mark_pipeline_boundary()
            x = nn.Dense(features=self.hidden_dim * 4)(x)
            x = nn.relu(x)
            x = nn.Dense(features=self.hidden_dim)(x)
            x = nn.relu(x)
            return x


    # Initialize the train state with the same parameters as the single-device
    # model.
    manual_pipeline_model = ManualPipelineMLPModel(hidden_dim=dim)
    manual_pipeline_state = TrainState.create(apply_fn=manual_pipeline_model.apply,
                                              params=copy.deepcopy(params),
                                              tx=tx)


    # Define the training step with manually parallelized pipeline stages.
    # We use the "alpa.PipeshardParallel" option to let alpa use both
    # pipeline parallelism and shard parallelism.
    @alpa.parallelize(method=alpa.PipeshardParallel(num_micro_batches=16))
    def manual_pipeline_train_step(state, batch):
        # Indicate that we are manually assigning pipeline stages.
        @alpa.manual_layer_construction
        def loss_func(params):
            out = state.apply_fn(params, batch["x"])
            loss = jnp.mean((out - batch["y"])**2)
            return loss

        # We use `alpa.grad` here to seperate the apply gradient stage with the
        # forward/backward stages in the pipeline. This is necessary to ensure that
        # the gradient accumulation is correct.
        grads = alpa.grad(loss_func)(state.params)
        new_state = state.apply_gradients(grads=grads)
        return new_state


    manual_pipeline_actual_state = manual_pipeline_train_step(
        manual_pipeline_state, batch)
    assert_allclose(expected_state.params,
                    manual_pipeline_actual_state.params,
                    atol=5e-3)

    alpa.shutdown()








.. GENERATED FROM PYTHON SOURCE LINES 174-189

Pipeline Parallelism with Automatic Assignment
----------------------------------------------
Alpa also supports automatically partitioning the model into multiple
pipeline stages and assign each pipeline stage a device mesh such that
the total execution latency is minimized. Specifically, the automatic
partitioning algorithm consists of the following steps:

1. **Layer Construction:** In this step, the operators in the model are
   clustered into "layers" based on a graph clustering algorithm. The
   user needs to specify the total number of layers (i.e. clusters) as
   a hyperparameter.
2. **Stage Construction and Mesh Slicing:** In this step, we partition
   the device cluster (device mesh) to multiple submeshes and assign
   layers to submeshes to form pipeline stages to minimize the total
   pipeline execution latency.

.. GENERATED FROM PYTHON SOURCE LINES 189-226

.. code-block:: default


    alpa.init(cluster="ray")

    # Define training step with automatic pipeline-operator parallelism. Note that
    # we reuse the same model and state as the single device case. The only
    # modification required is the two decorators. The stage construction and
    # mesh slicing are performed within the `parallelize` decorator.


    @alpa.parallelize(method=alpa.PipeshardParallel(num_micro_batches=16,
                                                    stage_mode="auto"))
    def auto_pipeline_train_step(state, batch):
        # Indicate that we use automatic layer construction. The `layer_num` here
        # is a hyperparameter to control how many layers we get from the
        # layer construction algorithm.
        @alpa.automatic_layer_construction(layer_num=2)
        def loss_func(params):
            out = state.apply_fn(params, batch["x"])
            loss = jnp.mean((out - batch["y"])**2)
            return loss

        # Again, we use `alpa.grad` here to seperate the apply gradient stage with
        # the forward/backward stages in the pipeline.
        grads = alpa.grad(loss_func)(state.params)
        new_state = state.apply_gradients(grads=grads)
        return new_state


    # In the first call, alpa triggers the compilation.
    # The compilation first profiles several costs and solves an optimization
    # problem to get the optimal pipeline assignments.
    auto_pipeline_actual_state = auto_pipeline_train_step(state, batch)
    assert_allclose(expected_state.params,
                    auto_pipeline_actual_state.params,
                    atol=5e-3)

    alpa.shutdown()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING:alpa.pipeline_parallel.layer_construction:Too few non-trivial ops (dot, conv), which may influence auto-sharding performance
    WARNING:alpa.pipeline_parallel.layer_construction:Too few non-trivial ops (dot, conv), which may influence auto-sharding performance
    -------------------- Automatic stage clustering --------------------
    submesh_choices: ((1, 1), (1, 2), (1, 4), (1, 8))
    - Profiling for submesh 3 (1, 8):
    - Generate all stage infos (Jaxpr -> HLO)
      0%|          | 0/2 [00:00<?, ?it/s]
      0%|          | 0/2 [00:00<?, ?it/s]
                                         
      0%|          | 0/1 [00:00<?, ?it/s]
                                             100%|##########| 2/2 [00:00<00:00, 26.09it/s]
    - Compile all stages
      0%|          | 0/5 [00:00<?, ?it/s]     20%|##        | 1/5 [00:03<00:12,  3.11s/it]     80%|########  | 4/5 [00:03<00:00,  1.25it/s]    100%|##########| 5/5 [00:03<00:00,  1.26it/s]
    - Profile all stages
      0%|          | 0/5 [00:00<?, ?it/s]                                         cost[0, 1, 0]=0.007, max_n_succ_stage=4096, Mem: avail=7.744GB, peak=1.001GB, intermediate=0.000GB, init=0.500GB, as_config=((8, 1), {'force_batch_dim_to_mesh_dim': 0})
      0%|          | 0/5 [00:23<?, ?it/s]     20%|##        | 1/5 [00:23<01:32, 23.14s/it]                                                 cost[0, 1, 1]=0.004, max_n_succ_stage=4096, Mem: avail=7.744GB, peak=0.501GB, intermediate=0.000GB, init=0.250GB, as_config=((4, 2), {'force_batch_dim_to_mesh_dim': 0})
     20%|##        | 1/5 [00:24<01:32, 23.14s/it]     40%|####      | 2/5 [00:24<00:31, 10.59s/it]                                                 cost[0, 1, 2]=0.004, max_n_succ_stage=4096, Mem: avail=7.744GB, peak=0.251GB, intermediate=0.000GB, init=0.125GB, as_config=((2, 4), {'force_batch_dim_to_mesh_dim': 0})
     40%|####      | 2/5 [00:26<00:31, 10.59s/it]     60%|######    | 3/5 [00:26<00:12,  6.33s/it]                                                 cost[0, 1, 3]=0.005, max_n_succ_stage=4096, Mem: avail=7.744GB, peak=0.098GB, intermediate=0.000GB, init=0.063GB, as_config=((1, 8), {'force_batch_dim_to_mesh_dim': 0})
     60%|######    | 3/5 [00:26<00:12,  6.33s/it]     80%|########  | 4/5 [00:26<00:04,  4.10s/it]                                                 cost[0, 1, 4]=0.005, max_n_succ_stage=4096, Mem: avail=7.744GB, peak=0.098GB, intermediate=0.000GB, init=0.063GB, as_config=((8, 1), {})
     80%|########  | 4/5 [00:27<00:04,  4.10s/it]    100%|##########| 5/5 [00:27<00:00,  2.72s/it]    100%|##########| 5/5 [00:27<00:00,  5.43s/it]
    Profiling for submesh 3 (1, 8) takes 31.58 seconds
    Profiled costs are: [[[       inf        inf        inf        inf        inf]
      [0.00663643 0.00420337 0.0035784  0.00524542 0.00450479]]

     [[       inf        inf        inf        inf        inf]
      [       inf        inf        inf        inf        inf]]]
    Profiled max_n_succ_stages are: [[[  -1   -1   -1   -1   -1]
      [4096 4096 4096 4096 4096]]

     [[  -1   -1   -1   -1   -1]
      [  -1   -1   -1   -1   -1]]]
    --------------------------------------------------
    - Profiling for submesh 2 (1, 4):
    - Generate all stage infos (Jaxpr -> HLO)
      0%|          | 0/2 [00:00<?, ?it/s]
      0%|          | 0/2 [00:00<?, ?it/s]
    100%|##########| 2/2 [00:00<00:00, 14.37it/s]
                                                      50%|#####     | 1/2 [00:00<00:00,  7.12it/s]
      0%|          | 0/1 [00:00<?, ?it/s]
                                             100%|##########| 2/2 [00:00<00:00, 10.65it/s]
    - Compile all stages
      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:03<00:34,  3.15s/it]     33%|###3      | 4/12 [00:03<00:04,  1.60it/s]     58%|#####8    | 7/12 [00:03<00:01,  3.14it/s]     75%|#######5  | 9/12 [00:03<00:00,  4.03it/s]     92%|#########1| 11/12 [00:03<00:00,  5.40it/s]    100%|##########| 12/12 [00:04<00:00,  2.77it/s]
    - Profile all stages
      0%|          | 0/12 [00:00<?, ?it/s]                                          cost[0, 0, 1]=0.002, max_n_succ_stage=4096, Mem: avail=7.677GB, peak=0.252GB, intermediate=0.001GB, init=0.125GB, as_config=((2, 2), {'force_batch_dim_to_mesh_dim': 0})
      0%|          | 0/12 [00:14<?, ?it/s]      8%|8         | 1/12 [00:14<02:37, 14.28s/it]                                                  cost[0, 0, 2]=0.002, max_n_succ_stage=4096, Mem: avail=7.677GB, peak=0.099GB, intermediate=0.001GB, init=0.063GB, as_config=((1, 4), {'force_batch_dim_to_mesh_dim': 0})
      8%|8         | 1/12 [00:14<02:37, 14.28s/it]     17%|#6        | 2/12 [00:14<01:02,  6.22s/it]                                                  cost[0, 0, 3]=0.002, max_n_succ_stage=4096, Mem: avail=7.677GB, peak=0.099GB, intermediate=0.001GB, init=0.063GB, as_config=((4, 1), {})
     17%|#6        | 2/12 [00:15<01:02,  6.22s/it]     25%|##5       | 3/12 [00:15<00:31,  3.46s/it]                                                  cost[0, 0, 0]=0.004, max_n_succ_stage=4096, Mem: avail=7.595GB, peak=0.501GB, intermediate=0.001GB, init=0.250GB, as_config=((4, 1), {'force_batch_dim_to_mesh_dim': 0})
     25%|##5       | 3/12 [00:15<00:31,  3.46s/it]     33%|###3      | 4/12 [00:15<00:18,  2.28s/it]                                                  cost[0, 1, 1]=0.005, max_n_succ_stage=1867, Mem: avail=7.595GB, peak=0.501GB, intermediate=0.004GB, init=0.250GB, as_config=((2, 2), {'force_batch_dim_to_mesh_dim': 0})
     33%|###3      | 4/12 [00:17<00:18,  2.28s/it]     42%|####1     | 5/12 [00:17<00:15,  2.27s/it]                                                  cost[0, 1, 0]=0.007, max_n_succ_stage=2022, Mem: avail=7.677GB, peak=1.001GB, intermediate=0.003GB, init=0.500GB, as_config=((4, 1), {'force_batch_dim_to_mesh_dim': 0})
     42%|####1     | 5/12 [00:18<00:15,  2.27s/it]     50%|#####     | 6/12 [00:18<00:09,  1.65s/it]                                                  cost[0, 1, 2]=0.004, max_n_succ_stage=1489, Mem: avail=7.595GB, peak=0.194GB, intermediate=0.005GB, init=0.125GB, as_config=((1, 4), {'force_batch_dim_to_mesh_dim': 0})
     50%|#####     | 6/12 [00:18<00:09,  1.65s/it]     58%|#####8    | 7/12 [00:18<00:05,  1.18s/it]                                                  cost[0, 1, 3]=0.004, max_n_succ_stage=1505, Mem: avail=7.677GB, peak=0.194GB, intermediate=0.005GB, init=0.125GB, as_config=((4, 1), {})
     58%|#####8    | 7/12 [00:18<00:05,  1.18s/it]     67%|######6   | 8/12 [00:18<00:03,  1.13it/s]                                                  cost[1, 1, 0]=0.004, max_n_succ_stage=4096, Mem: avail=7.595GB, peak=0.501GB, intermediate=0.002GB, init=0.250GB, as_config=((4, 1), {'force_batch_dim_to_mesh_dim': 0})
     67%|######6   | 8/12 [00:18<00:03,  1.13it/s]     75%|#######5  | 9/12 [00:18<00:02,  1.46it/s]                                                  cost[1, 1, 1]=0.003, max_n_succ_stage=3986, Mem: avail=7.677GB, peak=0.252GB, intermediate=0.002GB, init=0.125GB, as_config=((2, 2), {'force_batch_dim_to_mesh_dim': 0})
     75%|#######5  | 9/12 [00:19<00:02,  1.46it/s]     83%|########3 | 10/12 [00:19<00:01,  1.89it/s]                                                   cost[1, 1, 2]=0.003, max_n_succ_stage=3043, Mem: avail=7.595GB, peak=0.099GB, intermediate=0.002GB, init=0.063GB, as_config=((1, 4), {'force_batch_dim_to_mesh_dim': 0})
     83%|########3 | 10/12 [00:19<00:01,  1.89it/s]     92%|#########1| 11/12 [00:19<00:00,  2.45it/s]                                                   cost[1, 1, 3]=0.003, max_n_succ_stage=3077, Mem: avail=7.677GB, peak=0.099GB, intermediate=0.002GB, init=0.063GB, as_config=((4, 1), {})
     92%|#########1| 11/12 [00:19<00:00,  2.45it/s]    100%|##########| 12/12 [00:19<00:00,  2.99it/s]    100%|##########| 12/12 [00:19<00:00,  1.62s/it]
    Profiling for submesh 2 (1, 4) takes 24.31 seconds
    Profiled costs are: [[[0.00365991 0.0024359  0.00198237 0.00213944        inf]
      [0.00666457 0.00481611 0.00420388 0.0044442         inf]]

     [[       inf        inf        inf        inf        inf]
      [0.00364137 0.00277649 0.00270841 0.00275747        inf]]]
    Profiled max_n_succ_stages are: [[[4096 4096 4096 4096   -1]
      [2022 1867 1489 1505   -1]]

     [[  -1   -1   -1   -1   -1]
      [4096 3986 3043 3077   -1]]]
    --------------------------------------------------
    - Profiling for submesh 1 (1, 2):
    - Generate all stage infos (Jaxpr -> HLO)
      0%|          | 0/2 [00:00<?, ?it/s]
      0%|          | 0/2 [00:00<?, ?it/s]
    100%|##########| 2/2 [00:00<00:00, 15.17it/s]
                                                      50%|#####     | 1/2 [00:00<00:00,  7.50it/s]
      0%|          | 0/1 [00:00<?, ?it/s]
                                             100%|##########| 2/2 [00:00<00:00, 10.87it/s]
    - Compile all stages
      0%|          | 0/9 [00:00<?, ?it/s]     11%|#1        | 1/9 [00:03<00:24,  3.12s/it]     67%|######6   | 6/9 [00:03<00:01,  2.47it/s]    100%|##########| 9/9 [00:03<00:00,  2.76it/s]
    - Profile all stages
      0%|          | 0/9 [00:00<?, ?it/s]                                         cost[0, 0, 2]=0.002, max_n_succ_stage=3407, Mem: avail=9.474GB, peak=0.194GB, intermediate=0.003GB, init=0.125GB, as_config=((2, 1), {})
      0%|          | 0/9 [00:12<?, ?it/s]     11%|#1        | 1/9 [00:12<01:37, 12.15s/it]                                                 cost[0, 0, 1]=0.002, max_n_succ_stage=2738, Mem: avail=7.677GB, peak=0.194GB, intermediate=0.003GB, init=0.125GB, as_config=((1, 2), {'force_batch_dim_to_mesh_dim': 0})
     11%|#1        | 1/9 [00:12<01:37, 12.15s/it]     22%|##2       | 2/9 [00:12<00:36,  5.20s/it]                                                 cost[0, 1, 1]=0.004, max_n_succ_stage=1205, Mem: avail=9.474GB, peak=0.383GB, intermediate=0.007GB, init=0.250GB, as_config=((1, 2), {'force_batch_dim_to_mesh_dim': 0})
     22%|##2       | 2/9 [00:12<00:36,  5.20s/it]     33%|###3      | 3/9 [00:12<00:17,  2.95s/it]                                                 cost[0, 1, 2]=0.005, max_n_succ_stage=960, Mem: avail=7.677GB, peak=0.383GB, intermediate=0.007GB, init=0.250GB, as_config=((2, 1), {})
     33%|###3      | 3/9 [00:13<00:17,  2.95s/it]     44%|####4     | 4/9 [00:13<00:09,  1.94s/it]                                                 cost[1, 1, 1]=0.003, max_n_succ_stage=2008, Mem: avail=7.677GB, peak=0.194GB, intermediate=0.004GB, init=0.125GB, as_config=((1, 2), {'force_batch_dim_to_mesh_dim': 0})
     44%|####4     | 4/9 [00:13<00:09,  1.94s/it]     56%|#####5    | 5/9 [00:13<00:05,  1.35s/it]                                                 cost[1, 1, 2]=0.003, max_n_succ_stage=2008, Mem: avail=7.677GB, peak=0.194GB, intermediate=0.004GB, init=0.125GB, as_config=((2, 1), {})
     56%|#####5    | 5/9 [00:13<00:05,  1.35s/it]     67%|######6   | 6/9 [00:13<00:02,  1.05it/s]                                                 cost[0, 0, 0]=0.004, max_n_succ_stage=3417, Mem: avail=9.514GB, peak=0.502GB, intermediate=0.003GB, init=0.250GB, as_config=((2, 1), {'force_batch_dim_to_mesh_dim': 0})
     67%|######6   | 6/9 [00:13<00:02,  1.05it/s]     78%|#######7  | 7/9 [00:13<00:01,  1.43it/s]                                                 cost[0, 1, 0]=0.007, max_n_succ_stage=1016, Mem: avail=7.711GB, peak=1.001GB, intermediate=0.006GB, init=0.500GB, as_config=((2, 1), {'force_batch_dim_to_mesh_dim': 0})
     78%|#######7  | 7/9 [00:13<00:01,  1.43it/s]                                                 cost[1, 1, 0]=0.004, max_n_succ_stage=2857, Mem: avail=9.474GB, peak=0.502GB, intermediate=0.003GB, init=0.250GB, as_config=((2, 1), {'force_batch_dim_to_mesh_dim': 0})
     78%|#######7  | 7/9 [00:14<00:01,  1.43it/s]    100%|##########| 9/9 [00:14<00:00,  1.85it/s]    100%|##########| 9/9 [00:14<00:00,  1.62s/it]
    Profiling for submesh 1 (1, 2) takes 18.42 seconds
    Profiled costs are: [[[0.00362478 0.0021157  0.00231285        inf        inf]
      [0.00727921 0.00449271 0.00461634        inf        inf]]

     [[       inf        inf        inf        inf        inf]
      [0.00408644 0.00270912 0.00266075        inf        inf]]]
    Profiled max_n_succ_stages are: [[[3417 2738 3407   -1   -1]
      [1016 1205  960   -1   -1]]

     [[  -1   -1   -1   -1   -1]
      [2857 2008 2008   -1   -1]]]
    --------------------------------------------------
    - Profiling for submesh 0 (1, 1):
    - Generate all stage infos (Jaxpr -> HLO)
      0%|          | 0/2 [00:00<?, ?it/s]
      0%|          | 0/2 [00:00<?, ?it/s]
    100%|##########| 2/2 [00:00<00:00, 15.21it/s]
                                                      50%|#####     | 1/2 [00:00<00:00,  7.54it/s]
      0%|          | 0/1 [00:00<?, ?it/s]
                                             100%|##########| 2/2 [00:00<00:00, 11.56it/s]
    - Compile all stages
      0%|          | 0/6 [00:00<?, ?it/s]     17%|#6        | 1/6 [00:02<00:13,  2.67s/it]     33%|###3      | 2/6 [00:02<00:04,  1.17s/it]     83%|########3 | 5/6 [00:02<00:00,  2.78it/s]    100%|##########| 6/6 [00:02<00:00,  2.02it/s]
    - Profile all stages
      0%|          | 0/6 [00:00<?, ?it/s]                                         cost[1, 1, 0]=0.004, max_n_succ_stage=1608, Mem: avail=10.455GB, peak=0.383GB, intermediate=0.006GB, init=0.250GB, as_config=((1, 1), {'force_batch_dim_to_mesh_dim': 0})
      0%|          | 0/6 [00:13<?, ?it/s]     17%|#6        | 1/6 [00:13<01:08, 13.75s/it]                                                 cost[0, 0, 0]=0.003, max_n_succ_stage=1914, Mem: avail=10.455GB, peak=0.384GB, intermediate=0.005GB, init=0.250GB, as_config=((1, 1), {'force_batch_dim_to_mesh_dim': 0})
     17%|#6        | 1/6 [00:13<01:08, 13.75s/it]     33%|###3      | 2/6 [00:13<00:23,  5.76s/it]                                                 cost[0, 1, 1]=0.007, max_n_succ_stage=752, Mem: avail=10.455GB, peak=0.763GB, intermediate=0.012GB, init=0.500GB, as_config=((1, 1), {})
     33%|###3      | 2/6 [00:14<00:23,  5.76s/it]     50%|#####     | 3/6 [00:14<00:09,  3.33s/it]                                                 cost[1, 1, 1]=0.004, max_n_succ_stage=1608, Mem: avail=10.455GB, peak=0.383GB, intermediate=0.006GB, init=0.250GB, as_config=((1, 1), {})
     50%|#####     | 3/6 [00:14<00:09,  3.33s/it]     67%|######6   | 4/6 [00:14<00:04,  2.11s/it]                                                 cost[0, 0, 1]=0.003, max_n_succ_stage=1914, Mem: avail=10.457GB, peak=0.384GB, intermediate=0.005GB, init=0.250GB, as_config=((1, 1), {})
     67%|######6   | 4/6 [00:14<00:04,  2.11s/it]     83%|########3 | 5/6 [00:14<00:01,  1.42s/it]                                                 cost[0, 1, 0]=0.007, max_n_succ_stage=752, Mem: avail=10.457GB, peak=0.763GB, intermediate=0.012GB, init=0.500GB, as_config=((1, 1), {'force_batch_dim_to_mesh_dim': 0})
     83%|########3 | 5/6 [00:15<00:01,  1.42s/it]    100%|##########| 6/6 [00:15<00:00,  1.01s/it]    100%|##########| 6/6 [00:15<00:00,  2.50s/it]
    Profiling for submesh 0 (1, 1) takes 18.49 seconds
    Profiled costs are: [[[0.00322072 0.00317796        inf        inf        inf]
      [0.00657121 0.00652342        inf        inf        inf]]

     [[       inf        inf        inf        inf        inf]
      [0.00367742 0.00368982        inf        inf        inf]]]
    Profiled max_n_succ_stages are: [[[1914 1914   -1   -1   -1]
      [ 752  752   -1   -1   -1]]

     [[  -1   -1   -1   -1   -1]
      [1608 1608   -1   -1   -1]]]
    --------------------------------------------------
    Compute cost saved to: compute-cost-2022-06-30-07-58-07.npy
    ----------------------------------------------------------------------
    Result forward_stage_layer_ids: [[0], [1]]
    Result mesh_shapes: [(1, 4), (1, 4)]
    Result logical_mesh_shapes: [(1, 4), (1, 4)]
    Result autosharding_option_dicts: [{'force_batch_dim_to_mesh_dim': 0}, {'force_batch_dim_to_mesh_dim': 0}]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  35.785 seconds)


.. _sphx_glr_download_tutorials_pipeshard_parallelism.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: pipeshard_parallelism.py <pipeshard_parallelism.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: pipeshard_parallelism.ipynb <pipeshard_parallelism.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
